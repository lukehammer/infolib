Chaper 3 -- Functions 


Small.
	--no smaller then that!

Do one thing.
	-- "Functions should do one thing . They should do it well. They should so it only."

One level of abstraction per function. 

Switch staments 
	--It's hard to make a small switch statment.
	--General rule for Switch statments can be tolerated if they appear only one add are used to create polymorphic objects
	and are hidden behind an inheritance relationship. 


Use descriptive names.
	

Arguments.
	Best to worse 

	1. niladic -- no arguments      -- best
	2. monadic -- one argument      -- good 
	3. dyadic -- two arguments      -- still good 
	4. triadic -- three arguments   -- Meh - geting to grey here 
	5. polyadic -- more then three   **needs very special justification**

	--if need to passing a bunch of args round up into own class and pass in just the one class Object. 


Flag Arguments 
	--Very bad practice 
			-- If used clear that function is doing more than one thing. 
			-- Split method into several independent methods that can be called from the client without the flag.


Have no side effects.

Output Arguments
	--Should be avoided 
		-"If your function must change the state of something have it change the state of the owning object."


Command Query Seperation 
	--do something or answer something, But not both. 
	-- Extract the try/catches out into functions that do the body of work – Throw liberally, catch sparingly
	-- Error handling is “one thing” – so it should be the beginning and end of your function

Prefer Exceptions to Returning Error Codes

D.R.Y.
	--Don't Repeat  Yourself

Structured Programming 
	--Multiple return, break, continue - Good when used correctly
	--but GOTO should always be avoided.  
